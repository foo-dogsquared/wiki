{"pageProps":{"metadata":{"date":"2022-06-11 17:36:08 +08:00","date_modified":"2022-06-11 18:10:24 +08:00>","language":"en","source":""},"title":"Code Staging in GNU Guix","hast":{"type":"root","children":[{"type":"element","tagName":"nav","properties":{"className":"toc"},"children":[{"type":"element","tagName":"ol","properties":{"className":"toc-level toc-level-1"},"children":[]}]},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"element","tagName":"li","properties":{},"children":[{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"describes the code staging process for package definitions in "},{"type":"element","tagName":"a","properties":{"href":"/2020-08-19-08-21-44"},"children":[{"type":"text","value":"Guix package manager"}]},{"type":"text","value":";\n  mainly describing "},{"type":"element","tagName":"a","properties":{"href":"roam:Guix G-expressions"},"children":[{"type":"text","value":"roam:Guix G-expressions"}]}]}]},{"type":"element","tagName":"li","properties":{},"children":[{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"creating package definitions often certain parts of the definitions to carry through the build stage;\n  oftentimes, these parts of code include additional build instructions for non-trivial packages and additional inputs for that package\n"}]}]},{"type":"element","tagName":"li","properties":{},"children":[{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"while S-expressions (sexp) are nice, they can be verbose at times;\n  this is where G-expressions (gexp) comes in handy\n"}]},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"element","tagName":"li","properties":{},"children":[{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"gexp are hygenic — they preserve lexical scope across different stages\n"}]}]},{"type":"element","tagName":"li","properties":{},"children":[{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"they can easily refer to the high-level objects (e.g., packages, local file) in the store (i.e., "},{"type":"element","tagName":"code","properties":{"className":["inline-code"]},"children":[{"type":"text","value":"/gnu/store"}]},{"type":"text","value":")\n"}]}]},{"type":"element","tagName":"li","properties":{},"children":[{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"first-class Scheme values\n"}]}]},{"type":"element","tagName":"li","properties":{},"children":[{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"binds deployment to staging — when brought into staging, all inputs are also deployed as well\n"}]}]}]}]},{"type":"element","tagName":"li","properties":{},"children":[{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"use cases for gexps\n"}]},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"element","tagName":"li","properties":{},"children":[{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"code sharing between multiple stages;\n    this is mostly present such as defining packages and building them\n"}]}]},{"type":"element","tagName":"li","properties":{},"children":[{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"cross-compilation — there are additional operators to denote \"nativeness\" where it will refer to the \"native\" version rather than the target version\n"}]}]},{"type":"element","tagName":"li","properties":{},"children":[{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"package definitions — less verbose definitions which is always nice especially with the use of referring to the absolute file names from the store\n"}]}]},{"type":"element","tagName":"li","properties":{},"children":[{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"system services — the process and lifecycle of system services is similar to defining packages being composed of multiple stages: one in definition and one in building the services in the init system\n"}]}]},{"type":"element","tagName":"li","properties":{},"children":[{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"system tests — they can be defined through the "},{"type":"element","tagName":"code","properties":{"className":["inline-verbatim"]},"children":[{"type":"text","value":"operating-system"}]},{"type":"text","value":" interface which are derivations describing entire operating systems;\n    in Guix, this is implemented through a tool called "},{"type":"element","tagName":"code","properties":{"className":["inline-verbatim"]},"children":[{"type":"text","value":"marionette"}]},{"type":"text","value":" which introduces another stage in the pipeline\n"}]}]}]}]}]}]},"backlinks":[]},"__N_SSG":true}