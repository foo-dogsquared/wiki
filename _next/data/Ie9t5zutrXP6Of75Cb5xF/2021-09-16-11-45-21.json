{"pageProps":{"metadata":{"date":"2021-09-16 11:45:21 +08:00","date_modified":"2022-06-21 20:23:43 +08:00","language":"en","source":""},"title":"Problems with simpler tools","hast":{"type":"root","children":[{"type":"element","tagName":"nav","properties":{"className":"toc"},"children":[{"type":"element","tagName":"ol","properties":{"className":"toc-level toc-level-1"},"children":[]}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"While "},{"type":"element","tagName":"a","properties":{"href":"/2021-09-16-11-18-31"},"children":[{"type":"text","value":"Simple tools make better workflows"}]},{"type":"text","value":", it can have problems too.\n"}]},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"element","tagName":"li","properties":{},"children":[{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"The scope of simpler tools often results in doing the same task with multiple tools compared to less simpler tools.\n  This is a sign of the process being too small or atomic.\n  In this case, "},{"type":"element","tagName":"a","properties":{"href":"/2022-06-21-20-15-36"},"children":[{"type":"text","value":"All-in-one tools make good explorations"}]},{"type":"text","value":" to look how other tools does it while adding the necessary parts preventing from being too simple.\n"}]}]},{"type":"element","tagName":"li","properties":{},"children":[{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Consequently, with the plethora of simple tools working together, incidental complexity will arise with the quirks of the tools starting to appear.\n  Complexity is inevitable even in simpler tools.\n"}]}]},{"type":"element","tagName":"li","properties":{},"children":[{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Simple tools can be deceiving.\n  C (the programming language), for example, is very simple but hides undefined behaviors.\n  This often comes from the consequence of focusing being smaller in scope while being used for bigger use cases.\n  This is where complex tools often wins by considering more problems to solve than its simpler counterparts.\n"}]}]},{"type":"element","tagName":"li","properties":{},"children":[{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"With the limited scope, simple tools don't often have good out-of-the-box experience compared to complex tools — e.g., lack of tutorials.\n  Though, this depends on the audience and the intended scope — e.g., maybe they "},{"type":"element","tagName":"a","properties":{"href":"/2021-04-06-22-25-17"},"children":[{"type":"text","value":"Prefer referencing over remembering"}]},{"type":"text","value":", too technical to make it streamlined for general use cases, targeted for expert users.\n"}]}]}]}]},"backlinks":[{"path":"/2021-09-16-11-18-31","title":"Simple tools make better workflows"}]},"__N_SSG":true}